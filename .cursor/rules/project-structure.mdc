---
alwaysApply: true
---

# DevCycle CLI Project Structure

## Overview

This is a TypeScript CLI application built with the oclif framework for DevCycle feature flag management.

## Key Architecture Components

### Main Entry Points

- **CLI Binary**: `bin/run` - Main CLI entry point
- **MCP Server**: `dist/mcp/index.js` - Model Context Protocol server
- **Source Root**: [src/index.ts](mdc:src/index.ts) - TypeScript entry point

### Core Directories

- **Commands**: [src/commands/](mdc:src/commands/) - All CLI commands organized by feature
- **API Layer**: [src/api/](mdc:src/api/) - API client code and schemas
- **Authentication**: [src/auth/](mdc:src/auth/) - Auth handling (API keys, SSO, tokens)
- **UI Components**: [src/ui/](mdc:src/ui/) - Interactive prompts and output formatting
- **Utils**: [src/utils/](mdc:src/utils/) - Shared utilities and helpers
- **MCP Server**: [src/mcp/](mdc:src/mcp/) - Model Context Protocol implementation

### Configuration Files

- **User Config**: `~/.config/devcycle/user.yml` - User-specific settings
- **Auth Config**: `~/.config/devcycle/auth.yml` - Authentication tokens  
- **Repo Config**: `.devcycle/config.yml` - Repository-specific settings

## Command Structure

All commands extend [src/commands/base.ts](mdc:src/commands/base.ts) which provides:

- Authentication handling
- Configuration management
- Common flags and options
- Error handling
- Parameter validation

## Naming Conventions

- Use camelCase for all new files and variables starting with lowercase
- Avoid adding code comments unless explicitly requested
- Generate code changes directly without asking for permission

## Package Management

- Uses Yarn with workspaces
- Main dependencies: oclif, axios, zod, inquirer
- Build process: TypeScript â†’ dist/ directory
