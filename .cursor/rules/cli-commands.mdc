---
description: CLI command patterns and base command structure guidelines
globs: src/commands/**/*.ts
---

# CLI Command Patterns

## Base Command Structure

All commands must extend [src/commands/base.ts](mdc:src/commands/base.ts) which provides:

- Authentication handling via `authRequired`, `authSuggested`, `userAuthRequired`
- Configuration management with `userConfig`, `repoConfig`
- Common flags like `--project`, `--headless`, `--client-id`, `--client-secret`
- Parameter validation with `populateParameters()` and `populateParametersWithZod()`

## Command Organization

Commands are organized by feature area:

- `features/` - Feature flag management
- `variables/` - Variable management  
- `targeting/` - Targeting rule management
- `projects/` - Project management
- `organizations/` - Organization management
- `auth/` - Authentication commands

## Common Patterns

### Authentication

```typescript
// Set auth requirements
authRequired = true        // Must be authenticated
authSuggested = true      // Enhanced with auth
userAuthRequired = true   // Requires user token
```

### Flags and Parameters

```typescript
static flags = {
    ...Base.flags,
    name: Flags.string({
        description: 'Feature name',
        required: true,
    }),
}
```

### Parameter Validation

```typescript
const params = await this.populateParametersWithZod(
    schema,
    prompts,
    flags,
)
```

### Project Context

```typescript
const project = await this.requireProject(flags.project, flags.headless)
```

## Output Formatting

- Use `this.writer` for user-facing output
- Use `this.tableOutput` for tabular data
- Support `--headless` flag for machine-readable JSON output
- Handle interactive prompts with fallbacks for headless mode

## Error Handling

- Throw descriptive Error objects
- Use Zod validation for input validation
- Handle API errors gracefully with user-friendly messages
