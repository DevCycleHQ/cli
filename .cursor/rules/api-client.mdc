---
globs: src/api/**/*.ts
---

# API Client Patterns

## Core Components

- **Main Client**: [src/api/apiClient.ts](mdc:src/api/apiClient.ts) - Axios-based HTTP client
- **Zod Client**: [src/api/zodClient.ts](mdc:src/api/zodClient.ts) - Type-safe API client
- **Schemas**: [src/api/schemas.ts](mdc:src/api/schemas.ts) - Generated TypeScript types

## HTTP Client Setup

```typescript
import { apiClient } from '../api/apiClient'

// Client is pre-configured with:
// - Base URL from common.ts
// - Authentication headers
// - Error interceptors
// - Request/response logging
```

## API Function Patterns

Each API module follows this pattern:

```typescript
// Individual API functions
export const getFeature = async (
    featureKey: string,
    projectKey: string,
    authToken: string,
): Promise<Feature> => {
    // Implementation
}

// Bulk operations
export const fetchFeatures = async (
    projectKey: string,
    authToken: string,
): Promise<Feature[]> => {
    // Implementation
}
```

## Error Handling

- Use axios interceptors for global error handling
- Return structured error responses
- Handle 401 unauthorized gracefully
- Provide user-friendly error messages

## Authentication

- Pass `authToken` as parameter to API functions
- Use `Authorization: Bearer ${token}` header
- Handle token expiration and refresh

## Type Safety

- Use generated schemas from OpenAPI spec
- Validate responses with Zod schemas
- Export TypeScript types for consumers

## Common Patterns

- All API functions are async
- Return typed responses based on schemas
- Include proper error handling
- Support pagination where applicable
- Use consistent parameter naming (projectKey, featureKey, etc.)
